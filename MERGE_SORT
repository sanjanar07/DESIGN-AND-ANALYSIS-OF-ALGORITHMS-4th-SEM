//Time Complexity = O(n log n) for best,worst and average case
//Space complexity = O(n)
//Stable algorithm
//Not in-place algorithm

import java.util.Scanner;

public class MERGE_SORT 
{
	void mergesort(int a[],int low,int mid,int high)
	{
		int n1=mid-low+1;
		int n2=high-mid;
		
		int left[]=new int[n1];
		int right[]=new int[n2];
		
		for(int i=0;i<n1;i++)
			left[i]=a[low+i];
		for(int j=0;j<n2;j++)
			right[j]=a[mid+1+j];
		
	       int i=0,j=0;
	       int k=low;
	       while(i<n1&&j<n2)
	       {
	            if(left[i]<=right[j])
	            {
	                a[k]=left[i];
	                i++;
	            }
	            else
	            {
	                a[k]=right[j];
	                j++;
	            }
	            k++;
	       }
	       while(i<n1)
	       {
	            a[k]=left[i];
	            i++;
	            k++;
	        }
	        while(j<n2)
	        {
	            a[k]=right[j];
	            j++;
	            k++;
	        }
	}
	
	void sort(int a[],int l,int h)
	{
		if(l<h)
		{
			int m=(l+h)/2;
			
			sort(a,l,m);
			sort(a,m+1,h);
			
			mergesort(a,l,m,h);
		}
	}
	
	void print(int a[],int low,int high)
	{
		for(int i=low;i<=high;i++)
		{
			System.out.print(a[i]+" ");
		}
		System.out.println();
	}

	public static void main(String[] args) 
	{
		int n;
		Scanner sc=new Scanner(System.in);
		System.out.println("ENTER THE NNUMBER OF ARRAY ELEMENTS");
		n=sc.nextInt();
		int a[]=new int[n];
	    System.out.println("ENTER THE UNSORTED ARRAY ELEMENTS");
	    for(int i=0;i<n;i++)
	        a[i]=sc.nextInt();
	    sc.close();
	    
	    MERGE_SORT ms=new MERGE_SORT();
	    
	    System.out.println("~~BEFORE MERGE SORT~~");
	    System.out.println("THE ARRAY ELEMENTS - ");
	    ms.print(a,0,n-1);
	    
	    
	    ms.sort(a,0,n-1);
	    
	    System.out.println("~~AFTER MERGE SORT~~");
	    System.out.println("THE SORTED ARRAY ELEMENTS - ");
	    ms.print(a,0,n-1);
	}

}
