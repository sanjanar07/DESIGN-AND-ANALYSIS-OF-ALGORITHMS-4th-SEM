//Time Complexity = O(n logn) for Best and average case
//                  O(n^2) for Worst case(sorted array)
//Space complexity = O(n)
//Not a stable algorithm
//In-place algorithm

import java.util.Scanner;

public class QUICK_SORT
{
	void quicksort(int arr[],int l,int h)
	{
		if(l<h)
		{
			int j=partition(arr,l,h);
			quicksort(arr,l,j-1);
			quicksort(arr,j+1,h);
		}
		
		
	}
	int partition(int arr[],int l,int h)
	{
		int pivot=arr[l];
		int i=l;
		int j=h;
		while(i<j)
		{
			while(i<h &&arr[i]<=pivot){
				i++;
			}
			
			while(j>l && arr[j]>pivot){
				j--;
			}
				
				if(i<j)
				{
					swap(arr,i,j);
				}
		}
		swap(arr,l,j);
		
		return j;
	}
	
	void swap(int arr[],int i,int j)
	{
		int temp=arr[i];
		arr[i]=arr[j];
		arr[j]=temp;
		
	}
	
	public static void main(String[] args) 
	{
		    Scanner sc=new Scanner(System.in);
            System.out.println("~~ENTER THE NUMBER OF ELEMENTS~~");
            int n=sc.nextInt();
            int arr[]=new int[n];
            System.out.println("~~ENTER THE ARRAY ELEMENTS~~");
            for(int i=0;i<n;i++)
            {
	           arr[i]=sc.nextInt();  
            }
            sc.close();
            
	        QUICK_SORT ob=new QUICK_SORT();
	        ob.quicksort(arr,0,n-1);
	
	        System.out.println("~~THE SORTED ARRAY ELEMENTS ARE~~");
	        for(int i=0;i<n;i++)
	        {
		       System.out.println(arr[i]+" "); 
	        }
	 }
}
